package key

import (
	"crypto/aes"
	"crypto/cipher"
	"testing"

	"github.com/arailly/mytls13/util"
	"github.com/google/go-cmp/cmp"
)

func TestHKDFExpandLabel(t *testing.T) {
	secret := []byte{
		0x4b, 0x31, 0x2b, 0x01, 0x15, 0x61, 0x33, 0x84,
		0x6e, 0xff, 0xa3, 0x97, 0xf6, 0x5f, 0x46, 0x1e,
		0xb2, 0xa7, 0x84, 0xc8, 0x16, 0x66, 0x16, 0x6b,
		0xa2, 0xe9, 0x36, 0x3e, 0x83, 0x72, 0x59, 0xf5,
	}
	expected := []byte{
		0x5e, 0xca, 0x70, 0xa4, 0xda, 0x66, 0x20, 0x5a,
		0x71, 0xf3, 0xeb, 0x5d, 0x59, 0xe3, 0x9d, 0x53,
	}
	actual := HKDFExpandLabel(secret, "key", nil, 16)
	diff := cmp.Diff(expected, actual)
	if diff != "" {
		t.Error(diff)
	}
}

func TestDeriveSecret(t *testing.T) {
	clientHello := []byte{
		0x01, 0x00, 0x00, 0xd8, 0x03, 0x03, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x06, 0x13, 0x01, 0x13, 0x02, 0x13, 0x03, 0x01,
		0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x0e, 0x00,
		0x0c, 0x00, 0x00, 0x09, 0x6c, 0x6f, 0x63, 0x61,
		0x6c, 0x68, 0x6f, 0x73, 0x74, 0x00, 0x05, 0x00,
		0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a,
		0x00, 0x0a, 0x00, 0x08, 0x00, 0x1d, 0x00, 0x17,
		0x00, 0x18, 0x00, 0x19, 0x00, 0x0b, 0x00, 0x02,
		0x01, 0x00, 0x00, 0x0d, 0x00, 0x1a, 0x00, 0x18,
		0x08, 0x04, 0x04, 0x03, 0x08, 0x07, 0x08, 0x05,
		0x08, 0x06, 0x04, 0x01, 0x05, 0x01, 0x06, 0x01,
		0x05, 0x03, 0x06, 0x03, 0x02, 0x01, 0x02, 0x03,
		0xff, 0x01, 0x00, 0x01, 0x00, 0x00, 0x12, 0x00,
		0x00, 0x00, 0x2b, 0x00, 0x05, 0x04, 0x03, 0x04,
		0x03, 0x03, 0x00, 0x33, 0x00, 0x26, 0x00, 0x24,
		0x00, 0x1d, 0x00, 0x20, 0x2f, 0xe5, 0x7d, 0xa3,
		0x47, 0xcd, 0x62, 0x43, 0x15, 0x28, 0xda, 0xac,
		0x5f, 0xbb, 0x29, 0x07, 0x30, 0xff, 0xf6, 0x84,
		0xaf, 0xc4, 0xcf, 0xc2, 0xed, 0x90, 0x99, 0x5f,
		0x58, 0xcb, 0x3b, 0x74,
	}
	serverHello := []byte{
		0x02, 0x00, 0x00, 0x76, 0x03, 0x03, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13,
		0x01, 0x00, 0x00, 0x2e, 0x00, 0x2b, 0x00, 0x02,
		0x03, 0x04, 0x00, 0x33, 0x00, 0x24, 0x00, 0x1d,
		0x00, 0x20, 0x2f, 0xe5, 0x7d, 0xa3, 0x47, 0xcd,
		0x62, 0x43, 0x15, 0x28, 0xda, 0xac, 0x5f, 0xbb,
		0x29, 0x07, 0x30, 0xff, 0xf6, 0x84, 0xaf, 0xc4,
		0xcf, 0xc2, 0xed, 0x90, 0x99, 0x5f, 0x58, 0xcb,
		0x3b, 0x74,
	}
	handshakeSecret := []byte{
		0x17, 0xd9, 0xe1, 0xe3, 0x02, 0x1a, 0xb7, 0x64,
		0x26, 0x97, 0x86, 0xa5, 0xf0, 0x5a, 0x20, 0xe4,
		0x4d, 0x9e, 0x1c, 0xa9, 0x86, 0x77, 0xfb, 0x86,
		0x22, 0xde, 0x59, 0xa1, 0x5c, 0x52, 0xa9, 0x02,
	}
	expected := []byte{
		0x4b, 0x31, 0x2b, 0x01, 0x15, 0x61, 0x33, 0x84,
		0x6e, 0xff, 0xa3, 0x97, 0xf6, 0x5f, 0x46, 0x1e,
		0xb2, 0xa7, 0x84, 0xc8, 0x16, 0x66, 0x16, 0x6b,
		0xa2, 0xe9, 0x36, 0x3e, 0x83, 0x72, 0x59, 0xf5,
	}
	context := append(clientHello, serverHello...)
	actual := deriveSecret(handshakeSecret, "s hs traffic", context)
	diff := cmp.Diff(expected, actual)
	if diff != "" {
		t.Error(diff)
	}
}

func TestDecrypt(t *testing.T) {
	cipherText := []byte{
		// 0x17, 0x03, 0x03, 0x00, 0x17,
		0x9d, 0x94, 0x21,
		0x65, 0xa7, 0x77, 0xa9, 0xee, 0xe9, 0x1e, 0x1f,
		0xdb, 0x77, 0xd2, 0x89, 0xc8, 0x86, 0xb7, 0x7f,
		0xb3, 0x0f, 0xac, 0x0c,
	}
	secret := []byte{
		0x4b, 0x31, 0x2b, 0x01, 0x15, 0x61, 0x33, 0x84,
		0x6e, 0xff, 0xa3, 0x97, 0xf6, 0x5f, 0x46, 0x1e,
		0xb2, 0xa7, 0x84, 0xc8, 0x16, 0x66, 0x16, 0x6b,
		0xa2, 0xe9, 0x36, 0x3e, 0x83, 0x72, 0x59, 0xf5,
	}
	expected := []byte{
		0x08, 0x00, 0x00, 0x02, 0x00, 0x00, 0x16,
	}
	writeKey := HKDFExpandLabel(secret, "key", nil, 16)
	writeIV := HKDFExpandLabel(secret, "iv", nil, 12)
	block, err := aes.NewCipher(writeKey)
	if err != nil {
		t.Fatal(err)
	}
	gcm, err := cipher.NewGCM(block)
	if err != nil {
		t.Fatal(err)
	}
	additionalData := []byte{0x17}
	additionalData = append(additionalData, 0x03, 0x03)
	additionalData = append(additionalData, util.ToBytes(uint16(23))...)
	actual, err := gcm.Open(nil, writeIV, cipherText, additionalData)
	if err != nil {
		t.Error(err)
	}
	diff := cmp.Diff(expected, actual)
	if diff != "" {
		t.Error(diff)
	}
}

func TestSetHandshakeKey(t *testing.T) {
	clientHello := []byte{
		0x01, 0x00, 0x00, 0xd8, 0x03, 0x03, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x06, 0x13, 0x01, 0x13, 0x02, 0x13, 0x03, 0x01,
		0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x0e, 0x00,
		0x0c, 0x00, 0x00, 0x09, 0x6c, 0x6f, 0x63, 0x61,
		0x6c, 0x68, 0x6f, 0x73, 0x74, 0x00, 0x05, 0x00,
		0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a,
		0x00, 0x0a, 0x00, 0x08, 0x00, 0x1d, 0x00, 0x17,
		0x00, 0x18, 0x00, 0x19, 0x00, 0x0b, 0x00, 0x02,
		0x01, 0x00, 0x00, 0x0d, 0x00, 0x1a, 0x00, 0x18,
		0x08, 0x04, 0x04, 0x03, 0x08, 0x07, 0x08, 0x05,
		0x08, 0x06, 0x04, 0x01, 0x05, 0x01, 0x06, 0x01,
		0x05, 0x03, 0x06, 0x03, 0x02, 0x01, 0x02, 0x03,
		0xff, 0x01, 0x00, 0x01, 0x00, 0x00, 0x12, 0x00,
		0x00, 0x00, 0x2b, 0x00, 0x05, 0x04, 0x03, 0x04,
		0x03, 0x03, 0x00, 0x33, 0x00, 0x26, 0x00, 0x24,
		0x00, 0x1d, 0x00, 0x20, 0x2f, 0xe5, 0x7d, 0xa3,
		0x47, 0xcd, 0x62, 0x43, 0x15, 0x28, 0xda, 0xac,
		0x5f, 0xbb, 0x29, 0x07, 0x30, 0xff, 0xf6, 0x84,
		0xaf, 0xc4, 0xcf, 0xc2, 0xed, 0x90, 0x99, 0x5f,
		0x58, 0xcb, 0x3b, 0x74,
	}
	serverHello := []byte{
		0x02, 0x00, 0x00, 0x76, 0x03, 0x03, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13,
		0x01, 0x00, 0x00, 0x2e, 0x00, 0x2b, 0x00, 0x02,
		0x03, 0x04, 0x00, 0x33, 0x00, 0x24, 0x00, 0x1d,
		0x00, 0x20, 0x2f, 0xe5, 0x7d, 0xa3, 0x47, 0xcd,
		0x62, 0x43, 0x15, 0x28, 0xda, 0xac, 0x5f, 0xbb,
		0x29, 0x07, 0x30, 0xff, 0xf6, 0x84, 0xaf, 0xc4,
		0xcf, 0xc2, 0xed, 0x90, 0x99, 0x5f, 0x58, 0xcb,
		0x3b, 0x74,
	}
	messages := append(clientHello, serverHello...)
	sharedKey := []byte{
		0x93, 0xfe, 0xa2, 0xa7, 0xc1, 0xae, 0xb6, 0x2c,
		0xfd, 0x64, 0x52, 0xff, 0x5b, 0xad, 0xae, 0x8b,
		0xdf, 0xfc, 0xbd, 0x71, 0x96, 0xdc, 0x91, 0x0c,
		0x89, 0x94, 0x40, 0x06, 0xd8, 0x5d, 0xbb, 0x68,
	}
	earlySecret := []byte{
		0x33, 0xad, 0x0a, 0x1c, 0x60, 0x7e, 0xc0, 0x3b,
		0x09, 0xe6, 0xcd, 0x98, 0x93, 0x68, 0x0c, 0xe2,
		0x10, 0xad, 0xf3, 0x00, 0xaa, 0x1f, 0x26, 0x60,
		0xe1, 0xb2, 0x2e, 0x10, 0xf1, 0x70, 0xf9, 0x2a,
	}
	handshakeSecret := []byte{
		0x17, 0xd9, 0xe1, 0xe3, 0x02, 0x1a, 0xb7, 0x64,
		0x26, 0x97, 0x86, 0xa5, 0xf0, 0x5a, 0x20, 0xe4,
		0x4d, 0x9e, 0x1c, 0xa9, 0x86, 0x77, 0xfb, 0x86,
		0x22, 0xde, 0x59, 0xa1, 0x5c, 0x52, 0xa9, 0x02,
	}

	k := NewKeys("server")
	k.SetEarlySecret(nil)
	diff := cmp.Diff(earlySecret, k.earlySecret)
	if diff != "" {
		t.Error(diff)
	}

	k.SetHandshakeSecret(sharedKey, messages)
	diff = cmp.Diff(handshakeSecret, k.handshakeSecret)
	if diff != "" {
		t.Error(diff)
	}
}
